{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useFetch = url => {\n  _s();\n  //for the blogs\n  const [data, setData] = useState(null);\n  //for the loading while getting data\n  const [isPending, setIsPending] = useState(true);\n  //when data dosent work or no such think\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    //for when switching tabs very fast and data didnt load so not to get error\n    const abortCont = new AbortController();\n    setTimeout(() => {\n      //getting url (the db) , line 12\n      fetch(url, {\n        signal: abortCont.signal\n      }).then(res => {\n        if (!res.ok) {\n          // error coming back from server\n          throw Error('could not fetch the data for that resource');\n        }\n        return res.json();\n      }).then(data => {\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      }).catch(err => {\n        if (err.name === 'AbortError') {} else {\n          // auto catches network / connection error\n          setIsPending(false);\n          setError(err.message);\n        }\n      });\n    }, 1000);\n\n    // abort the fetch , line 12\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","catch","err","name","message","abort"],"sources":["/Users/samraitan/Documents/VScode/react-app/src/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n  //for the blogs\n  const [data, setData] = useState(null);\n  //for the loading while getting data\n  const [isPending, setIsPending] = useState(true);\n  //when data dosent work or no such think\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    //for when switching tabs very fast and data didnt load so not to get error\n    const abortCont = new AbortController();\n\n    setTimeout(() => {\n      //getting url (the db) , line 12\n      fetch(url, { signal: abortCont.signal })\n      .then(res => {\n        if (!res.ok) { // error coming back from server\n          throw Error('could not fetch the data for that resource');\n        } \n        return res.json();\n      })\n      .then(data => {\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n        } else {\n          // auto catches network / connection error\n          setIsPending(false);\n          setError(err.message);\n        }\n      })\n    }, 1000);\n\n    // abort the fetch , line 12\n    return () => abortCont.abort();\n  }, [url])\n\n  return { data, isPending, error };\n}\n \nexport default useFetch;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAA;EACxB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACtC;EACA,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAChD;EACA,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,SAAS,GAAG,IAAIC,eAAe,EAAE;IAEvCC,UAAU,CAAC,MAAM;MACf;MACAC,KAAK,CAACV,GAAG,EAAE;QAAEW,MAAM,EAAEJ,SAAS,CAACI;MAAO,CAAC,CAAC,CACvCC,IAAI,CAACC,GAAG,IAAI;QACX,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;UAAE;UACb,MAAMC,KAAK,CAAC,4CAA4C,CAAC;QAC3D;QACA,OAAOF,GAAG,CAACG,IAAI,EAAE;MACnB,CAAC,CAAC,CACDJ,IAAI,CAACX,IAAI,IAAI;QACZG,YAAY,CAAC,KAAK,CAAC;QACnBF,OAAO,CAACD,IAAI,CAAC;QACbK,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,CACDW,KAAK,CAACC,GAAG,IAAI;QACZ,IAAIA,GAAG,CAACC,IAAI,KAAK,YAAY,EAAE,CAC/B,CAAC,MAAM;UACL;UACAf,YAAY,CAAC,KAAK,CAAC;UACnBE,QAAQ,CAACY,GAAG,CAACE,OAAO,CAAC;QACvB;MACF,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAMb,SAAS,CAACc,KAAK,EAAE;EAChC,CAAC,EAAE,CAACrB,GAAG,CAAC,CAAC;EAET,OAAO;IAAEC,IAAI;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACnC,CAAC;AAAA,GAzCKN,QAAQ;AA2Cd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module"}